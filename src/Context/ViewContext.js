import html2canvas from "html2canvas";
import { createContext, useRef, useState } from "react";

export let ViewContext = createContext();

export default function ViewContextProvider(props) {
  const [textAlign, setTextAlign] = useState("text-start");
  const [font, setFont] = useState("Roboto");
  const [color, setColor] = useState("#5B8F9A");
  const [resize, setResize] = useState("");
  const [textContent, setTextContent] = useState([]);
  const [iconContent, setIconContent] = useState([]);
  const [shapeContent, setShapeContent] = useState([]);

  const [click, setClick] = useState(true)
  const [image, setImage] = useState(null);
  const [junk, setJunk] = useState(false);
  const [ mutation1 , setMutation1] = useState (true)
  const saveRef = useRef(null);
  const [usedindex, setUsedindex] = useState(-1);

  const [colorBtn, setColorBtn] = useState("#5B8F9A");
  const [id, setId] = useState(1);
  const [svg, setSVG] = useState(`<svg width="80" height="80" viewBox="0 0 80 80" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M66.25 25.625C64.643 25.625 63.0721 26.1015 61.736 26.9943C60.3998 27.8871 59.3584 29.156 58.7435 30.6407C58.1285 32.1253 57.9676 33.759 58.2811 35.3351C58.5946 36.9112 59.3685 38.3589 60.5048 39.4952C61.6411 40.6315 63.0888 41.4054 64.6649 41.7189C66.241 42.0324 67.8747 41.8715 69.3593 41.2565C70.844 40.6416 72.1129 39.6002 73.0057 38.264C73.8985 36.9279 74.375 35.357 74.375 33.75C74.375 31.5951 73.519 29.5285 71.9952 28.0048C70.4715 26.481 68.4049 25.625 66.25 25.625ZM66.25 38.125C65.3847 38.125 64.5388 37.8684 63.8194 37.3877C63.0999 36.9069 62.5392 36.2237 62.208 35.4242C61.8769 34.6248 61.7903 33.7451 61.9591 32.8965C62.1279 32.0478 62.5446 31.2683 63.1564 30.6564C63.7683 30.0446 64.5478 29.6279 65.3965 29.4591C66.2452 29.2903 67.1248 29.3769 67.9242 29.708C68.7237 30.0392 69.407 30.5999 69.8877 31.3194C70.3684 32.0388 70.625 32.8847 70.625 33.75C70.625 34.9103 70.1641 36.0231 69.3436 36.8436C68.5231 37.6641 67.4103 38.125 66.25 38.125ZM21.875 33.75C21.875 32.143 21.3985 30.5721 20.5057 29.236C19.6129 27.8998 18.344 26.8584 16.8593 26.2435C15.3747 25.6285 13.741 25.4676 12.1649 25.7811C10.5888 26.0946 9.14106 26.8685 8.00476 28.0048C6.86846 29.1411 6.09463 30.5888 5.78112 32.1649C5.46762 33.741 5.62852 35.3747 6.24348 36.8593C6.85844 38.344 7.89985 39.6129 9.236 40.5057C10.5721 41.3985 12.143 41.875 13.75 41.875C15.9049 41.875 17.9715 41.019 19.4952 39.4952C21.019 37.9715 21.875 35.9049 21.875 33.75ZM13.75 38.125C12.8847 38.125 12.0388 37.8684 11.3194 37.3877C10.5999 36.9069 10.0392 36.2237 9.70803 35.4242C9.3769 34.6248 9.29026 33.7451 9.45907 32.8965C9.62788 32.0478 10.0446 31.2683 10.6564 30.6564C11.2683 30.0446 12.0478 29.6279 12.8965 29.4591C13.7451 29.2903 14.6248 29.3769 15.4242 29.708C16.2237 30.0392 16.907 30.5999 17.3877 31.3194C17.8684 32.0388 18.125 32.8847 18.125 33.75C18.125 34.9103 17.6641 36.0231 16.8436 36.8436C16.0231 37.6641 14.9103 38.125 13.75 38.125ZM28.75 26.875C30.357 26.875 31.9279 26.3985 33.264 25.5057C34.6002 24.6129 35.6416 23.344 36.2565 21.8593C36.8715 20.3747 37.0324 18.741 36.7189 17.1649C36.4054 15.5888 35.6315 14.1411 34.4952 13.0048C33.3589 11.8685 31.9112 11.0946 30.3351 10.7811C28.759 10.4676 27.1254 10.6285 25.6407 11.2435C24.1561 11.8584 22.8871 12.8998 21.9943 14.236C21.1015 15.5721 20.625 17.143 20.625 18.75C20.625 20.9049 21.481 22.9715 23.0048 24.4952C24.5285 26.019 26.5951 26.875 28.75 26.875ZM28.75 14.375C29.6153 14.375 30.4612 14.6316 31.1806 15.1123C31.9001 15.5931 32.4608 16.2763 32.792 17.0758C33.1231 17.8752 33.2098 18.7549 33.0409 19.6035C32.8721 20.4522 32.4555 21.2317 31.8436 21.8436C31.2317 22.4555 30.4522 22.8721 29.6035 23.0409C28.7549 23.2098 27.8752 23.1231 27.0758 22.792C26.2763 22.4608 25.5931 21.9001 25.1123 21.1806C24.6316 20.4612 24.375 19.6153 24.375 18.75C24.375 17.5897 24.8359 16.4769 25.6564 15.6564C26.4769 14.8359 27.5897 14.375 28.75 14.375ZM51.25 26.875C52.857 26.875 54.4279 26.3985 55.764 25.5057C57.1002 24.6129 58.1416 23.344 58.7565 21.8593C59.3715 20.3747 59.5324 18.741 59.2189 17.1649C58.9054 15.5888 58.1315 14.1411 56.9952 13.0048C55.8589 11.8685 54.4112 11.0946 52.8351 10.7811C51.259 10.4676 49.6254 10.6285 48.1407 11.2435C46.6561 11.8584 45.3871 12.8998 44.4943 14.236C43.6015 15.5721 43.125 17.143 43.125 18.75C43.125 20.9049 43.981 22.9715 45.5048 24.4952C47.0285 26.019 49.0951 26.875 51.25 26.875ZM51.25 14.375C52.1153 14.375 52.9612 14.6316 53.6806 15.1123C54.4001 15.5931 54.9608 16.2763 55.292 17.0758C55.6231 17.8752 55.7097 18.7549 55.5409 19.6035C55.3721 20.4522 54.9555 21.2317 54.3436 21.8436C53.7317 22.4555 52.9522 22.8721 52.1035 23.0409C51.2549 23.2098 50.3752 23.1231 49.5758 22.792C48.7763 22.4608 48.0931 21.9001 47.6123 21.1806C47.1316 20.4612 46.875 19.6153 46.875 18.75C46.875 17.5897 47.3359 16.4769 48.1564 15.6564C48.9769 14.8359 50.0897 14.375 51.25 14.375ZM58.1719 47.0656C56.8309 46.3252 55.6488 45.3278 54.6933 44.1305C53.7378 42.9332 53.0276 41.5594 52.6031 40.0875C51.8098 37.3587 50.1522 34.9612 47.8795 33.2551C45.6068 31.5491 42.8418 30.6268 40 30.6268C37.1582 30.6268 34.3932 31.5491 32.1205 33.2551C29.8478 34.9612 28.1903 37.3587 27.3969 40.0875C26.5431 43.0548 24.5456 45.5615 21.8438 47.0563C19.5198 48.3139 17.6816 50.3109 16.6204 52.7309C15.5591 55.1509 15.3354 57.8558 15.9845 60.4173C16.6337 62.9788 18.1187 65.2506 20.2044 66.8731C22.2902 68.4955 24.8575 69.376 27.5 69.375C29.085 69.377 30.654 69.0581 32.1125 68.4375C37.1577 66.3579 42.8205 66.3579 47.8656 68.4375C49.3311 69.0603 50.9077 69.3792 52.5 69.375C55.1407 69.3756 57.7062 68.496 59.791 66.8753C61.8758 65.2546 63.3609 62.9852 64.0116 60.426C64.6623 57.8667 64.4413 55.1636 63.3837 52.744C62.3261 50.3244 60.4922 48.3263 58.1719 47.0656ZM52.5 65.625C51.4034 65.6265 50.318 65.4053 49.3094 64.975C43.3402 62.5104 36.6379 62.5104 30.6688 64.975C28.7477 65.7755 26.5928 65.8083 24.6483 65.0667C22.7038 64.3252 21.118 62.8657 20.2178 60.9893C19.3177 59.1129 19.1719 56.9627 19.8105 54.9819C20.4491 53.0012 21.8234 51.341 23.65 50.3438C27.2234 48.3683 29.866 45.0546 30.9969 41.1313C31.5631 39.1814 32.747 37.4681 34.3705 36.2489C35.9941 35.0297 37.9696 34.3705 40 34.3705C42.0304 34.3705 44.0059 35.0297 45.6295 36.2489C47.2531 37.4681 48.4369 39.1814 49.0031 41.1313C49.5644 43.0767 50.5039 44.8923 51.7678 46.4742C53.0317 48.0561 54.5952 49.3732 56.3688 50.35C57.961 51.2094 59.2208 52.5757 59.9485 54.2323C60.6762 55.8888 60.8301 57.7409 60.3859 59.4949C59.9417 61.2488 58.9247 62.8044 57.4962 63.9148C56.0677 65.0253 54.3094 65.6271 52.5 65.625Z" fill="#2E2E2E"/>
  </svg>`);

  const [colorShapes, setColorShapes] = useState("#5B8F9A");
  const [idShapes, setIdShapes] = useState(1);
  const [svgShapes, setSVGShapes] = useState(`<svg width="80" height="80" viewBox="0 0 80 80" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="40" cy="40" r="40" fill="#D9D9D9"/>
  </svg>`);
const getImage = () => {
  setJunk(true);

  setTimeout(() => {
    html2canvas(saveRef.current).then((canvas) => {
      const imgData = canvas.toDataURL("image/png");
      setImage(imgData);
    });
    setJunk(false);
  }, 1);
};
  const [images, setImages] = useState([]);
  return (
    <ViewContext.Provider
      value={{
        usedindex,
        setUsedindex,
        mutation1,
        setMutation1,
        saveRef,
        image,
        setImage,
        junk, setJunk,
        getImage,
        setTextContent,
        setIconContent,
        setShapeContent,
        click,
        setClick,
        textAlign,
        setTextAlign,
        resize,
        setResize,
        font,
        setFont,
        color,
        setColor,
        colorBtn,
        setColorBtn,
        id,
        setId,
        svg,
        setSVG,
        colorShapes,
        setColorShapes,
        idShapes,
        setIdShapes,
        svgShapes,
        setSVGShapes,
        images,
        setImages,
        textContent,
        iconContent ,
        shapeContent
      }}
    >
      {props.children}
    </ViewContext.Provider>
  );
}
